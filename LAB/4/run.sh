#!/bin/bash

# Web Authoring Tools Security Lab Setup Script
# Compatible: Ubuntu, Kali Linux, Debian
# Purpose: Demonstrate vulnerabilities in web authoring tool-generated code
# Version: 2.0

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Global variables
MYSQL_ROOT_PASSWORD="root123"
WP_DB_NAME="wordpress"
WP_DB_USER="wpuser"
WP_DB_PASS="wppass123"

print_banner() {
    echo -e "${BLUE}"
    echo "=============================================="
    echo "  WEB AUTHORING TOOLS SECURITY LAB SETUP"
    echo "  Testing vulnerabilities in generated code"
    echo "=============================================="
    echo -e "${NC}"
}

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

detect_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    else
        log_error "Cannot detect OS"
        exit 1
    fi
    log_info "Detected OS: $OS $VER"
}

update_system() {
    log_info "Updating system packages..."
    apt update && apt upgrade -y
    log_info "System updated successfully"
}

install_lamp_stack() {
    log_info "Installing LAMP stack components..."
    
    # Install Apache, MySQL/MariaDB, PHP
    apt install -y apache2 mariadb-server mariadb-client
    apt install -y php php-mysqli php-gd php-curl php-json php-mbstring php-xml php-zip libapache2-mod-php
    
    # Install additional tools
    apt install -y git curl wget unzip nodejs npm
    
    # Enable and start services
    systemctl enable apache2 mariadb
    systemctl start apache2 mariadb
    
    log_info "LAMP stack installed successfully"
}

configure_mysql() {
    log_info "Configuring MySQL/MariaDB..."
    
    # Set root password and secure installation
    mysql -u root <<EOF
ALTER USER 'root'@'localhost' IDENTIFIED BY '$MYSQL_ROOT_PASSWORD';
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
FLUSH PRIVILEGES;
EOF
    
    log_info "MySQL configured with root password: $MYSQL_ROOT_PASSWORD"
}

install_vscode() {
    log_info "Installing Visual Studio Code..."
    
    # Add Microsoft GPG key and repository
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
    install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
    
    echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list
    
    apt update
    apt install -y code
    
    log_info "VS Code installed successfully"
}

setup_wordpress() {
    log_info "Setting up WordPress CMS..."
    
    # Create WordPress database and user
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" <<EOF
CREATE DATABASE IF NOT EXISTS $WP_DB_NAME DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER IF NOT EXISTS '$WP_DB_USER'@'localhost' IDENTIFIED BY '$WP_DB_PASS';
GRANT ALL PRIVILEGES ON $WP_DB_NAME.* TO '$WP_DB_USER'@'localhost';
FLUSH PRIVILEGES;
EOF
    
    # Download and setup WordPress
    cd /tmp
    wget -c https://wordpress.org/latest.tar.gz
    tar -xzf latest.tar.gz
    
    # Move to web directory
    cp -r wordpress /var/www/html/
    chown -R www-data:www-data /var/www/html/wordpress
    chmod -R 755 /var/www/html/wordpress
    
    # Create wp-config.php
    cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
    sed -i "s/database_name_here/$WP_DB_NAME/g" /var/www/html/wordpress/wp-config.php
    sed -i "s/username_here/$WP_DB_USER/g" /var/www/html/wordpress/wp-config.php
    sed -i "s/password_here/$WP_DB_PASS/g" /var/www/html/wordpress/wp-config.php
    
    log_info "WordPress setup complete"
}

create_vulnerable_forms() {
    log_info "Creating vulnerable HTML forms (simulating authoring tool output)..."
    
    # 1. Basic HTML login form (Dreamweaver-style)
    cat > /var/www/html/dreamweaver_login.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Dreamweaver-Generated Login Form</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 50px; }
        .form-container { border: 1px solid #ccc; padding: 20px; width: 300px; }
        input { margin: 5px 0; padding: 5px; width: 100%; }
    </style>
</head>
<body>
    <h2>Login Form (Generated by Dreamweaver)</h2>
    <div class="form-container">
        <form action="login_handler.php" method="POST">
            Username: <input type="text" name="user"><br>
            Password: <input type="password" name="pass"><br>
            <input type="submit" value="Login">
        </form>
    </div>
    <p><em>Note: This form is vulnerable to XSS and lacks input validation</em></p>
</body>
</html>
EOF

    # 2. Vulnerable PHP login handler
    cat > /var/www/html/login_handler.php << 'EOF'
<?php
// Vulnerable PHP code (typical of basic authoring tool output)
$username = $_POST['user'];
$password = $_POST['pass'];

echo "<h2>Login Attempt</h2>";
echo "Username entered: " . $username . "<br>";  // XSS vulnerable
echo "Password entered: " . $password . "<br>";   // XSS vulnerable

// Simulate database check (SQL injection vulnerable)
$conn = mysqli_connect("localhost", "root", "root123", "testdb");
if (!$conn) {
    die("Connection failed");
}

// Create test table and data
mysqli_query($conn, "CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50), password VARCHAR(50))");
mysqli_query($conn, "INSERT IGNORE INTO users (id, username, password) VALUES (1, 'admin', 'password123'), (2, 'user', 'userpass')");

// Vulnerable query
$query = "SELECT * FROM users WHERE username='$username' AND password='$password'";
$result = mysqli_query($conn, $query);

if (mysqli_num_rows($result) > 0) {
    echo "<p style='color: green;'>Login successful!</p>";
    while($row = mysqli_fetch_assoc($result)) {
        echo "Welcome, " . $row['username'] . "!<br>";
    }
} else {
    echo "<p style='color: red;'>Login failed!</p>";
}
?>
EOF

    # 3. FrontPage-style contact form
    cat > /var/www/html/frontpage_contact.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>FrontPage Contact Form</title>
    <style>
        body { font-family: Times, serif; margin: 40px; background: #f0f0f0; }
        .contact-form { background: white; padding: 30px; border: 2px outset; }
        input, textarea { font-family: Times, serif; }
    </style>
</head>
<body>
    <h1>Contact Us (FrontPage Generated)</h1>
    <div class="contact-form">
        <form action="contact_handler.php" method="POST">
            <p>Name: <input type="text" name="name" size="30"></p>
            <p>Email: <input type="text" name="email" size="30"></p>
            <p>Message:<br>
            <textarea name="message" rows="5" cols="40"></textarea></p>
            <p><input type="submit" value="Send Message"></p>
        </form>
    </div>
    <p><em>Classic FrontPage styling with vulnerable form processing</em></p>
</body>
</html>
EOF

    # 4. Contact form handler (vulnerable)
    cat > /var/www/html/contact_handler.php << 'EOF'
<?php
// FrontPage-style vulnerable handler
$name = $_POST['name'];
$email = $_POST['email'];
$message = $_POST['message'];

echo "<h2>Message Received</h2>";
echo "<p>Thank you, " . $name . "!</p>";          // XSS vulnerable
echo "<p>Your email: " . $email . "</p>";         // XSS vulnerable
echo "<p>Your message:</p>";
echo "<div style='border: 1px solid #ccc; padding: 10px;'>";
echo $message;  // XSS vulnerable
echo "</div>";

// Log to database (SQL injection vulnerable)
$conn = mysqli_connect("localhost", "root", "root123", "testdb");
mysqli_query($conn, "CREATE TABLE IF NOT EXISTS contacts (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), message TEXT, submitted TIMESTAMP DEFAULT CURRENT_TIMESTAMP)");

$query = "INSERT INTO contacts (name, email, message) VALUES ('$name', '$email', '$message')";
mysqli_query($conn, $query);

echo "<p><em>Message saved to database</em></p>";
?>
EOF

    # 5. VS Code generated form (modern but still vulnerable)
    cat > /var/www/html/vscode_form.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VS Code Generated Form</title>
    <style>
        * { box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #1e1e1e; color: white; padding: 20px; }
        .container { max-width: 600px; margin: 0 auto; background: #2d2d30; padding: 30px; border-radius: 8px; }
        .form-group { margin-bottom: 20px; }
        label { display: block; margin-bottom: 5px; color: #cccccc; }
        input, select, textarea { width: 100%; padding: 10px; background: #3c3c3c; border: 1px solid #555; color: white; border-radius: 4px; }
        button { background: #0e639c; color: white; padding: 12px 24px; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background: #1177bb; }
    </style>
</head>
<body>
    <div class="container">
        <h1>User Registration (VS Code Generated)</h1>
        <form action="vscode_handler.php" method="POST">
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="role">Role:</label>
                <select id="role" name="role">
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                    <option value="moderator">Moderator</option>
                </select>
            </div>
            <div class="form-group">
                <label for="bio">Bio:</label>
                <textarea id="bio" name="bio" rows="4" placeholder="Tell us about yourself..."></textarea>
            </div>
            <button type="submit">Register</button>
        </form>
    </div>
</body>
</html>
EOF

    # 6. VS Code handler (modern looking but vulnerable)
    cat > /var/www/html/vscode_handler.php << 'EOF'
<?php
// Modern-looking but vulnerable handler
$username = $_POST['username'];
$email = $_POST['email'];
$role = $_POST['role'];
$bio = $_POST['bio'];

echo '<!DOCTYPE html>
<html>
<head>
    <title>Registration Result</title>
    <style>
        body { font-family: "Segoe UI", sans-serif; background: #1e1e1e; color: white; padding: 20px; }
        .container { max-width: 600px; margin: 0 auto; background: #2d2d30; padding: 30px; border-radius: 8px; }
        .success { color: #4ec9b0; }
        .info { background: #3c3c3c; padding: 15px; border-radius: 4px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="success">Registration Successful!</h1>
        <div class="info">
            <h3>User Details:</h3>
            <p><strong>Username:</strong> ' . $username . '</p>
            <p><strong>Email:</strong> ' . $email . '</p>
            <p><strong>Role:</strong> ' . $role . '</p>
            <p><strong>Bio:</strong><br>' . $bio . '</p>
        </div>
    </div>
</body>
</html>';

// Database insertion (vulnerable)
$conn = mysqli_connect("localhost", "root", "root123", "testdb");
mysqli_query($conn, "CREATE TABLE IF NOT EXISTS registrations (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(100), email VARCHAR(100), role VARCHAR(50), bio TEXT, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP)");

$query = "INSERT INTO registrations (username, email, role, bio) VALUES ('$username', '$email', '$role', '$bio')";
mysqli_query($conn, $query);
?>
EOF

    log_info "Vulnerable forms created successfully"
}

create_secure_examples() {
    log_info "Creating secure versions for comparison..."
    
    # Secure login handler
    cat > /var/www/html/secure_login_handler.php << 'EOF'
<?php
// Secure PHP code example
$username = filter_input(INPUT_POST, 'user', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
$password = filter_input(INPUT_POST, 'pass', FILTER_SANITIZE_FULL_SPECIAL_CHARS);

echo "<h2>Secure Login Attempt</h2>";
echo "Username entered: " . htmlspecialchars($username, ENT_QUOTES, 'UTF-8') . "<br>";
echo "Password: [HIDDEN]<br>";

// Secure database connection
$conn = mysqli_connect("localhost", "root", "root123", "testdb");
if (!$conn) {
    die("Connection failed");
}

// Secure query using prepared statements
$stmt = $conn->prepare("SELECT id, username FROM users WHERE username=? AND password=?");
$stmt->bind_param("ss", $username, $password);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows > 0) {
    echo "<p style='color: green;'>Login successful!</p>";
    while($row = $result->fetch_assoc()) {
        echo "Welcome, " . htmlspecialchars($row['username'], ENT_QUOTES, 'UTF-8') . "!<br>";
    }
} else {
    echo "<p style='color: red;'>Login failed!</p>";
}
$stmt->close();
?>
EOF

    log_info "Secure examples created"
}

setup_database() {
    log_info "Setting up test database..."
    
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" <<EOF
CREATE DATABASE IF NOT EXISTS testdb;
USE testdb;

-- Users table for login testing
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL
);

INSERT IGNORE INTO users (username, password) VALUES 
('admin', 'password123'),
('user', 'userpass'),
('testuser', 'test123');

-- Contacts table for form submissions
CREATE TABLE IF NOT EXISTS contacts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    message TEXT,
    submitted TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Registrations table
CREATE TABLE IF NOT EXISTS registrations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100),
    email VARCHAR(100),
    role VARCHAR(50),
    bio TEXT,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
EOF

    log_info "Database setup complete"
}

create_landing_page() {
    log_info "Creating lab landing page..."
    
    cat > /var/www/html/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Web Authoring Tools Security Lab</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { background: #2c3e50; color: white; padding: 20px; text-align: center; margin-bottom: 30px; }
        .tool-section { background: #f8f9fa; padding: 20px; margin: 20px 0; border-left: 4px solid #007bff; }
        .vulnerable { border-left-color: #dc3545; }
        .secure { border-left-color: #28a745; }
        .link-box { background: white; padding: 15px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px; }
        .payload { background: #f1f1f1; padding: 10px; margin: 10px 0; font-family: monospace; }
        .warning { color: #dc3545; font-weight: bold; }
        .success { color: #28a745; font-weight: bold; }
    </style>
</head>
<body>
    <div class="header">
        <h1>🔧 Web Authoring Tools Security Lab</h1>
        <p>Study vulnerabilities in code generated by different web authoring tools</p>
    </div>
    
    <h2>🎯 Lab Objective</h2>
    <p>Demonstrate how web authoring tools can generate vulnerable code and learn to identify and test these vulnerabilities using Burp Suite.</p>
    
    <div class="tool-section vulnerable">
        <h3>🔴 Adobe Dreamweaver Style (Vulnerable Forms)</h3>
        <div class="link-box">
            <h4>Login Form</h4>
            <p><strong>URL:</strong> <a href="/dreamweaver_login.html" target="_blank">dreamweaver_login.html</a></p>
            <p><strong>Handler:</strong> <a href="/login_handler.php" target="_blank">login_handler.php</a></p>
            <p><strong>Vulnerabilities:</strong> XSS, SQL Injection</p>
            <div class="payload">
                <strong>XSS Payload:</strong> user=&lt;script&gt;alert('XSS')&lt;/script&gt;&amp;pass=test<br>
                <strong>SQLi Payload:</strong> user=' OR '1'='1&amp;pass=anything
            </div>
        </div>
    </div>
    
    <div class="tool-section vulnerable">
        <h3>🔴 Microsoft FrontPage Style (Legacy Vulnerable)</h3>
        <div class="link-box">
            <h4>Contact Form</h4>
            <p><strong>URL:</strong> <a href="/frontpage_contact.html" target="_blank">frontpage_contact.html</a></p>
            <p><strong>Handler:</strong> <a href="/contact_handler.php" target="_blank">contact_handler.php</a></p>
            <p><strong>Vulnerabilities:</strong> XSS, SQL Injection in form processing</p>
            <div class="payload">
                <strong>XSS Payload:</strong> name=&lt;script&gt;alert(document.cookie)&lt;/script&gt;<br>
                <strong>SQLi Payload:</strong> message=test'); DROP TABLE contacts; --
            </div>
        </div>
    </div>
    
    <div class="tool-section vulnerable">
        <h3>🔴 VS Code Generated (Modern but Vulnerable)</h3>
        <div class="link-box">
            <h4>User Registration Form</h4>
            <p><strong>URL:</strong> <a href="/vscode_form.html" target="_blank">vscode_form.html</a></p>
            <p><strong>Handler:</strong> <a href="/vscode_handler.php" target="_blank">vscode_handler.php</a></p>
            <p><strong>Vulnerabilities:</strong> XSS in bio field, SQL Injection</p>
            <div class="payload">
                <strong>XSS Payload:</strong> bio=&lt;img src=x onerror=alert('XSS')&gt;<br>
                <strong>SQLi Payload:</strong> username=admin'; UPDATE registrations SET role='admin' WHERE '1'='1'; --
            </div>
        </div>
    </div>
    
    <div class="tool-section">
        <h3>🟡 WordPress CMS</h3>
        <div class="link-box">
            <h4>WordPress Installation</h4>
            <p><strong>URL:</strong> <a href="/wordpress/" target="_blank">wordpress/</a></p>
            <p><strong>Features:</strong> Built-in sanitization, but plugins may be vulnerable</p>
            <p><strong>Database:</strong> wordpress (user: wpuser, pass: wppass123)</p>
        </div>
    </div>
    
    <div class="tool-section secure">
        <h3>🟢 Secure Implementation Examples</h3>
        <div class="link-box">
            <h4>Secure Login Handler</h4>
            <p><strong>URL:</strong> <a href="/secure_login_handler.php" target="_blank">secure_login_handler.php</a></p>
            <p><strong>Features:</strong> Input validation, prepared statements, output encoding</p>
        </div>
    </div>
    
    <h2>🔍 Testing with Burp Suite</h2>
    <ol>
        <li>Configure your browser to use Burp Suite proxy (127.0.0.1:8080)</li>
        <li>Visit each vulnerable form and submit test data</li>
        <li>Capture requests in Burp Proxy</li>
        <li>Send requests to Repeater for payload testing</li>
        <li>Try the provided XSS and SQL injection payloads</li>
        <li>Compare responses between vulnerable and secure handlers</li>
    </ol>
    
    <h2>🛠️ Authoring Tool Comparison</h2>
    <table style="width: 100%; border-collapse: collapse; margin: 20px 0;">
        <tr style="background: #f8f9fa;">
            <th style="border: 1px solid #ddd; padding: 10px;">Tool</th>
            <th style="border: 1px solid #ddd; padding: 10px;">Code Quality</th>
            <th style="border: 1px solid #ddd; padding: 10px;">Security Features</th>
            <th style="border: 1px solid #ddd; padding: 10px;">Developer Control</th>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd; padding: 10px;"><strong>Dreamweaver</strong></td>
            <td style="border: 1px solid #ddd; padding: 10px;">Basic HTML/CSS</td>
            <td style="border: 1px solid #ddd; padding: 10px;"><span class="warning">None</span></td>
            <td style="border: 1px solid #ddd; padding: 10px;">Limited</td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd; padding: 10px;"><strong>FrontPage</strong></td>
            <td style="border: 1px solid #ddd; padding: 10px;">Legacy HTML</td>
            <td style="border: 1px solid #ddd; padding: 10px;"><span class="warning">None</span></td>
            <td style="border: 1px solid #ddd; padding: 10px;">Very Limited</td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd; padding: 10px;"><strong>WordPress</strong></td>
            <td style="border: 1px solid #ddd; padding: 10px;">Modern PHP</td>
            <td style="border: 1px solid #ddd; padding: 10px;"><span class="success">Built-in sanitization</span></td>
            <td style="border: 1px solid #ddd; padding: 10px;">Theme dependent</td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd; padding: 10px;"><strong>VS Code</strong></td>
            <td style="border: 1px solid #ddd; padding: 10px;">Developer dependent</td>
            <td style="border: 1px solid #ddd; padding: 10px;">Developer dependent</td>
            <td style="border: 1px solid #ddd; padding: 10px;"><span class="success">Full control</span></td>
        </tr>
    </table>
    
    <h2>📊 Expected Test Results</h2>
    <div class="link-box">
        <h4>Vulnerable Forms</h4>
        <ul>
            <li><strong>XSS:</strong> JavaScript executes in browser</li>
            <li><strong>SQL Injection:</strong> Database queries manipulated</li>
            <li><strong>No input validation:</strong> All payloads accepted</li>
        </ul>
    </div>
    
    <div class="link-box">
        <h4>Secure Forms</h4>
        <ul>
            <li><strong>XSS:</strong> Scripts encoded and displayed safely</li>
            <li><strong>SQL Injection:</strong> Prepared statements prevent injection</li>
            <li><strong>Input validation:</strong> Malicious input sanitized</li>
        </ul>
    </div>
    
    <h2>🔗 Database Access</h2>
    <p><strong>MySQL Root:</strong> root / root123</p>
    <p><strong>WordPress DB:</strong> wordpress / wpuser / wppass123</p>
    <p><strong>Test DB:</strong> testdb (contains users, contacts, registrations tables)</p>
    
    <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; margin: 20px 0; border-radius: 5px;">
        <strong>⚠️ Important:</strong> This lab contains intentionally vulnerable code for educational purposes. 
        Never deploy these examples in production environments.
    </div>
</body>
</html>
EOF

    log_info "Landing page created successfully"
}

set_permissions() {
    log_info "Setting proper file permissions..."
    
    # Set ownership
    chown -R www-data:www-data /var/www/html/
    
    # Set permissions
    find /var/www/html/ -type d -exec chmod 755 {} \;
    find /var/www/html/ -type f -exec chmod 644 {} \;
    
    # Make PHP files executable
    chmod +x /var/www/html/*.php
    
    log_info "Permissions set successfully"
}

configure_apache() {
    log_info "Configuring Apache..."
    
    # Enable PHP
    a2enmod php*
    
    # Configure PHP settings for development
    sed -i 's/display_errors = Off/display_errors = On/' /etc/php/*/apache2/php.ini
    sed -i 's/display_startup_errors = Off/display_startup_errors = On/' /etc/php/*/apache2/php.ini
    
    # Restart Apache
    systemctl restart apache2
    
    log_info "Apache configured successfully"
}

check_services() {
    log_info "Checking service status..."
    
    # Check Apache
    if systemctl is-active --quiet apache2; then
        log_info "✓ Apache2 is running"
    else
        log_warn "✗ Apache2 is not running"
    fi
    
    # Check MariaDB
    if systemctl is-active --quiet mariadb; then
        log_info "✓ MariaDB is running"
    else
        log_warn "✗ MariaDB is not running"
    fi
    
    # Check if VS Code is installed
    if command -v code &> /dev/null; then
        log_info "✓ VS Code is installed"
    else
        log_warn "✗ VS Code installation may have failed"
    fi
}

show_completion_message() {
    echo -e "${GREEN}"
    echo "=================================================="
    echo "   🎉 WEB AUTHORING TOOLS LAB SETUP COMPLETE! 🎉"
    echo "=================================================="
    echo -e "${NC}"
    
    echo "Your web authoring tools security lab is ready!"
    echo ""
    echo "📍 Access your labs:"
    echo "   • Main Lab Page: http://localhost/"
    echo "   • WordPress CMS: http://localhost/wordpress/"
    echo "   • Dreamweaver Form: http://localhost/dreamweaver_login.html"
    echo "   • FrontPage Form: http://localhost/frontpage_contact.html"
    echo "   • VS Code Form: http://localhost/vscode_form.html"
    echo ""
    echo "🔧 Authoring Tools Covered:"
    echo "   ✓ Adobe Dreamweaver (vulnerable forms)"
    echo "   ✓ Microsoft FrontPage (legacy vulnerable)"
    echo "   ✓ WordPress CMS (with built-in security)"
    echo "   ✓ VS Code (modern but potentially vulnerable)"
    echo ""
    echo "🧪 Testing Vulnerabilities:"
    echo "   • Cross-Site Scripting (XSS)"
    echo "   • SQL Injection"
    echo "   • Input Validation Issues"
    echo "   • Output Encoding Problems"
    echo ""
    echo "🛡️ Testing Steps:"
    echo "   1. Configure Burp Suite proxy (127.0.0.1:8080)"
    echo "   2. Visit vulnerable forms and submit test data"
    echo "   3. Capture requests in Burp Proxy"
    echo "   4. Use Repeater to test XSS and SQLi payloads"
    echo "   5. Compare vulnerable vs secure implementations"
    echo ""
    echo "🔐 Database Access:"
    echo "   • MySQL root: root123"
    echo "   • WordPress DB: wordpress/wpuser/wppass123"
    echo "   • Test DB: testdb"
    echo ""
    echo "💡 Sample Payloads:"
    echo "   • XSS: <script>alert('XSS')</script>"
    echo "   • SQLi: ' OR '1'='1"
    echo "   • Advanced: '; DROP TABLE users; --"
    echo ""
    echo "Happy Security Testing! 🔍"
}

main() {
    print_banner
    check_root
    detect_os
    
    log_info "Starting Web Authoring Tools Security Lab setup..."
    
    update_system
    install_lamp_stack
    configure_mysql
    install_vscode
    setup_wordpress
    setup_database
    create_vulnerable_forms
    create_secure_examples
    create_landing_page
    configure_apache
    set_permissions
    
    check_services
    show_completion_message
}

# Run main function
main "$@"
